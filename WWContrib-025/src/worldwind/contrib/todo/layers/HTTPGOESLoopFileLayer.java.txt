package worldwind.contrib.layers.loop;

import gov.nasa.worldwind.geom.Sector;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Vector;

import org.apache.log4j.Logger;

import worldwind.contrib.layers.GroundOverlayLayer;
import worldwind.contrib.parsers.ParserUtils;
import worldwind.contrib.parsers.ParserUtils.HTTPDataSet;

/**
 * Animated ground overlays from NOAA's Sat imagery available at http://www.ssd.noaa.gov/goes/
 * The server uses a loop text file with frame information ( http://server/path/loopfile.txt )
 * <p>The format of this file is:
 * img/2007137_0715avn.jpg overlay= over/LALO.GIF, over/SATWIN_H.GIF, over/SATWIN_M.GIF, over/SATWIN_L.GIF, over/POINTS.GIF, over/FRONTS.GIF, over/WARN.GIF, over/IRTEMP.GIF
 * <p>Where the 1st field represents the image
 * <p>For example: http://www.ssd.noaa.gov/goes/east/eaus/txtfiles/avn_names.txt
 * @author Vladimir Silva
 *
 */
public class HTTPGOESLoopFileLayer extends TimeLoopGroundOverlay
{
	private static final Logger logger = Logger.getLogger(HTTPGOESLoopFileLayer.class);
	
	private Vector<ParserUtils.HTTPImageFrame> frames;
	private Sector bbox;
	
	/**
	 * Loop file HTTP satellite imagery from http://www.ssd.noaa.gov/goes/
	 * @param ds Dataset object of type {@link HTTPDataSet}
	 * @throws MalformedURLException
	 * @throws IOException
	 */
	public HTTPGOESLoopFileLayer(ParserUtils.HTTPDataSet ds)  
		throws MalformedURLException , IOException
	{
		super(ds.name);
		
		this.bbox = ds.bbox;
		this.frames = loadFrames(ds);
	}

	
	/*
	 * Load frames from HTTP directory. These map to gound overlays
	 */
	private Vector<ParserUtils.HTTPImageFrame> loadFrames(ParserUtils.HTTPDataSet ds)
		throws MalformedURLException , IOException
	{
		logger.debug("HTTP Dataset=" + ds);
		
		return ds.accessType.equalsIgnoreCase("loopfile")
		? ParserUtils.handleLoopFile(ds.directoryURL.toString()
				, ds.loopFile
				, 0)
		: ParserUtils.parseHTTPDirectory(ds.directoryURL
				, ds.directoryURL.toString()
				, ds.filter
				,  ParserUtils.httpQryStr2Properties(ds.dateFormat));

	}

	/**
	 * Build ground ovelays from a specified range of HTTP frames
	 * @param startFrame
	 * @param endFrame
	 * @throws MalformedURLException
	 * @throws IOException
	 */
	public void buildOverlays(  int startFrame, int endFrame) // ParserUtils.HTTPDataSet ds,  
		throws MalformedURLException , IOException
	{
        for (int i = startFrame; i < endFrame; i++) {
        	final GroundOverlayLayer layer = new GroundOverlayLayer(
					frames.get(i).date
					, this.bbox
					, new URL(frames.get(i).frameUrl)
					, frames.get(i).frameExt 
					);
        	
        	layer.setBaseCachePath("Earth/" + getName().replaceAll(" ", "") + "/");
        	add(layer);
		}
	}

	/**
	 * Build ground overlays for all frames in the HTTP directory of this data set.
	 * @throws MalformedURLException
	 * @throws IOException
	 */
	public void buildOverlays()  
		throws MalformedURLException , IOException
	{
	    for (int i = 0; i < frames.size(); i++) {
	    	final GroundOverlayLayer layer = new GroundOverlayLayer(
					frames.get(i).date
					, this.bbox
					, new URL(frames.get(i).frameUrl)
					, frames.get(i).frameExt 
					);
	    	
	    	layer.setBaseCachePath("Earth/" + getName().replaceAll(" ", "") + "/");
	    	add(layer);
		}
	}
	
	/**
	 * Get HTTP directory frames
	 * @return
	 */
	public Vector<ParserUtils.HTTPImageFrame> getFrames() {
		return frames;
	}

	/**
	 * Get names for each HTTP frame (ussually a date)
	 * @return
	 */
	public String[] getFrameNames() {
		String[] names = new String[frames.size()];
		for (int i = 0; i < names.length; i++) {
			names[i] = frames.get(i).date;
		}
		return names;
	}
}
